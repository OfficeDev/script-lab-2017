// should pass more general tests
/**
 * *Insert Description here*
 * @CustomFunction
 */
function getRgb3(input: number): string {

}
/**
 * *Insert Description here*
 * @CustomFunction
 */
function getRgb6(input?: number): string {

}
/**
 * *Insert Description here*
 * @CustomFunction
 */
function getRgb8(...input: number[][]): string {

}// ok, function with one parameter "input" that's a number array
/**
 * *Insert Description here*
 * @CustomFunction
 */
function getRgb9(...input?: number[][]): string {

}// ok, function with one parameter "input" that's a number array
/**
 * *Insert Description here*
 * @CustomFunction
 */
function getRgb10(format: string, input: number[][]): string[][] {
    return [['foo']];
}// ok, function with two parameters "input" that's a number array

/**
 * *Insert Description here*
 * @CustomFunction
 */
function functionWith2DArraySyntax(x: Array<Array<number>>) : number {
    return 5;
}

// * Snippet "xyz"
//     getRgb (message)
//     getHex
// * Snippet abc

// { name: "getRgb", messages: [
//     `Parameter "input" must specify a valid type (string, number, boolean, or an array of one of these)`
//     `The function must specify a valid return type`
// ]}

// metadata
/*
[
   {
      "description":"*Insert Description here*",
      "name":"snippetName.getRgb3",
      "options":{
         "cancelable":true,
         "stream":false,
         "sync":true,
         "volatile":false
      },
      "parameters":[
         {
            "dimensionality":"scalar",
            "name":"input",
            "type":"number"
         }
      ],
      "result":{
         "dimensionality":"scalar",
         "type":"string"
      }
   },
   {
      "description":"*Insert Description here*",
      "name":"snippetName.getRgb6",
      "options":{
         "cancelable":true,
         "stream":false,
         "sync":true,
         "volatile":false
      },
      "parameters":[
         {
            "dimensionality":"scalar",
            "name":"input",
            "type":"number"
         }
      ],
      "result":{
         "dimensionality":"scalar",
         "type":"string"
      }
   },
   {
      "description":"*Insert Description here*",
      "name":"snippetName.getRgb8",
      "options":{
         "cancelable":true,
         "stream":false,
         "sync":true,
         "volatile":false
      },
      "parameters":[
         {
            "dimensionality":"matrix",
            "name":"input",
            "type":"number"
         }
      ],
      "result":{
         "dimensionality":"scalar",
         "type":"string"
      }
   },
   {
      "description":"*Insert Description here*",
      "name":"snippetName.getRgb9",
      "options":{
         "cancelable":true,
         "stream":false,
         "sync":true,
         "volatile":false
      },
      "parameters":[
         {
            "dimensionality":"matrix",
            "name":"input",
            "type":"number"
         }
      ],
      "result":{
         "dimensionality":"scalar",
         "type":"string"
      }
   },
   {
      "description":"*Insert Description here*",
      "name":"snippetName.getRgb10",
      "options":{
         "cancelable":true,
         "stream":false,
         "sync":true,
         "volatile":false
      },
      "parameters":[
         {
            "dimensionality":"scalar",
            "name":"format",
            "type":"string"
         },
         {
            "dimensionality":"matrix",
            "name":"input",
            "type":"number"
         }
      ],
      "result":{
         "dimensionality":"matrix",
         "type":"string"
      }
   },
   {
      "description":"*Insert Description here*",
      "name":"snippetName.functionWith2DArraySyntax",
      "options":{
         "cancelable":true,
         "stream":false,
         "sync":true,
         "volatile":false
      },
      "parameters":[
         {
            "dimensionality":"matrix",
            "name":"x",
            "type":"number"
         }
      ],
      "result":{
         "dimensionality":"scalar",
         "type":"number"
      }
   }
]
*/
